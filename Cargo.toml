[workspace]
members = ["examples/neural-network-mnist", "benches/*"]

[workspace.package]
version = "0.2.0-alpha"
authors = ["Charles R Earp <charles.r.earp@gmail.com>"]
edition = "2021"
rust-version = "1.68.0"
documentation = "https://docs.rs/krnl"
readme = "README.md"
homepage = "https://github.com/charles-r-earp/autograph"
repository = "https://github.com/charles-r-earp/autograph"
license = "MIT OR Apache-2.0"
publish = false

[workspace.dependencies]
autograph = { path = ".", default-features = false }
anyhow = "1.0.37"
clap = "4.2.5"
rayon = "1.7.0"
crossbeam-channel = "0.5.8"
parking_lot = "0.12.1"
serde = { version = "1.0.126" }
serde_json = "1.0.96"
ndarray = { version = "0.15.6", default-features = false }

[package]
name = "autograph"
version.workspace = true
authors.workspace = true
edition.workspace = true
rust-version.workspace = true
description = "A machine learning library for Rust."
documentation.workspace = true
readme.workspace = true
homepage.workspace = true
repository.workspace = true
license.workspace = true
keywords = ["neural-networks", "machine-learning", "deep-learning", "autograd", "gpu"]
categories = ["hardware-support", "science", "mathematics"]
publish.workspace = true
autobins = false 
autobenches = false

[dependencies]
krnl = { git = "https://github.com/charles-r-earp/krnl", default-features = false }
anyhow.workspace = true
ndarray = { workspace = true, features = ["serde", "rayon", "matrixmultiply-threading"] }
rand = { version = "0.8.4", optional = true }
serde = { workspace = true, features = ["derive", "rc"] }
derive_more = "0.99.11"
thiserror = "1.0.23"
approx = "0.5.0"
#prettytable-rs = "0.8.0"
bytemuck = "1.4.1"
byteorder = { version = "1.4.3", optional = true }
dirs = { version = "3.0.2", optional = true }
downloader = { version = "0.2.6", optional = true }
flate2 = { version = "1.0.20", optional = true }
half = { version = "=2.1.0", features = ["num-traits", "bytemuck", "serde"] }
http = { version = "0.2.4", optional = true }
paste = "1.0.7"
dry = "0.1.1"
crunchy = { version = "0.2.2", optional = true }
static_assertions = "1.1.0"
crossbeam-channel = { workspace = true, optional = true }
parking_lot = { workspace = true, optional = true }
atomicbox = { version = "0.4.0", optional = true }
rayon.workspace = true
once_cell = { version = "1.17.1", optional = true, features = ["std"] }
num-traits = "0.2.15"

[dev-dependencies]
approx = "0.4.0"
serde_test = "1.0.160"
ndarray = { workspace = true, features = ["approx"] }

[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
libtest-mimic = "0.6.0"

[features]
default = ["device"]
device = ["krnl/device", "dep:crunchy", "dep:once_cell"]
dataset = ["dep:rand"]
mnist = ["dataset", "dep:dirs", "dep:flate2", "dep:downloader", "dep:byteorder", "dep:http"]
learn = []
neural-network = ["learn", "dep:crossbeam-channel", "dep:parking_lot", "dep:atomicbox", "dep:rand", "dep:once_cell"]

[package.metadata.krnlc]
features = ["neural-network"]

[package.metadata.krnlc.dependencies]
half = { default-features = false, features = ["num-traits"] }
dry = {}
paste = {}
crunchy = { default-features = false, features = ["limit_64"] }
static_assertions = {}

[[test]]
name = "integration_tests"
path = "tests/integration_tests.rs"
harness = false
