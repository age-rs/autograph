#version 450

#include "buffer_macros.comp"

#define LOCAL_SIZE 64

layout(local_size_x=LOCAL_SIZE) in;

buffer DX {
    T_BUFFER[] dx;
};

readonly buffer DY {
    T_BUFFER[] dy;
};

layout(push_constant) uniform PushConsts {
    uint n;
    uint c;
};

#ifdef BF16
    shared T dx_shared[LOCAL_SIZE];
#endif

void main() {
    uint global_x = gl_GlobalInvocationID.x;
    uint local_x = gl_LocalInvocationID.x;
    #ifdef BF16
        if (global_x < c) {
            dx_shared[local_x] = BUFFER_LOAD(dx, global_x);
        } else {
            dx_shared[local_x] = 0;
        }
        memoryBarrierShared();
    #endif
    T acc;
    if (global_x < c) {
        #ifdef BF16
            acc = dx_shared[local_x];
        #else
            acc = BUFFER_LOAD(dx, global_x);
        #endif

        for(uint i = 0; i < n; ++i) {
            acc += BUFFER_LOAD(dy, i * c + global_x);
        }

        #ifdef BF16
            dx_shared[local_x] = acc;
            memoryBarrierShared();
            if (local_x % 2 == 0) {
                uint a = floatBitsToUint(dx_shared[local_x]) >> 16;
                uint b = floatBitsToUint(dx_shared[local_x + 1]) & 0xFFFF0000;
                dx[global_x / 2] = a | b;
            }
        #else
            BUFFER_STORE(dx, global_x, acc);
        #endif
    }
}
