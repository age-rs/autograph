#version 450

#include "buffer_macros.comp"

layout(local_size_x=8, local_size_y=8) in;

readonly buffer Next {
    T_BUFFER n[];
};

readonly buffer Counts {
    uint c[];
};

restrict writeonly buffer Y {
    T_BUFFER y[];
};

layout(push_constant) uniform PushConsts {
    uint nclasses;
    uint ndim;
};

void main() {
    uint global_x = gl_GlobalInvocationID.x;
    uint global_y = gl_GlobalInvocationID.y;
    T value;
    T tmp = 0;
    uint count;
    if (global_x < nclasses && global_y < ndim) {
        value = BUFFER_LOAD(n, global_x * ndim + global_y);
        count = c[global_x];
        if (count > 0) {
            tmp = value / float(count);
            #ifdef BF16
                BUFFER_ATOMIC_STORE(y, global_x * ndim + global_y, tmp);
            #else
                BUFFER_STORE(y, global_x * ndim + global_y, tmp);
            #endif
        }
    }
}
