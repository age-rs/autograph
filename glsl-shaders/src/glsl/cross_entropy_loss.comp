#version 450

#include "buffer_macros.comp"

layout(local_size_x=64) in;

readonly buffer X {
    T_BUFFER[] x;
};

readonly buffer Target {
    T_BUFFER[] t;
};

writeonly buffer Y {
    T_BUFFER[] y;
};

layout(push_constant) uniform PushConsts {
    uint n;
    uint nclasses;
};

void main() {
    uint tid = gl_GlobalInvocationID.x;
    uint index = tid * nclasses;
    T q, z;
    T[C] tmp; // C must be larger than nclasses
    if (tid < n && nclasses <= C) {
        // load tmp
        for(uint i = 0; i < nclasses; ++i) {
            tmp[i] = BUFFER_LOAD(x, index + i);
        }
        // compute max value of slice
        q = tmp[0];
        for(uint i = 1; i < nclasses; ++i) {
            q = max(tmp[i], q);
        }
        // subtract max
        for(uint i = 0; i < C; ++i) {
            tmp[i] -= q;
        }
        q = 0;
        // sum
        for(uint i = 0; i < nclasses; ++i) {
          q += exp(tmp[i]);
        }
        // compute ln(q)
        q = log(q);
        // y = (ln_q - y) * t
        for(uint i = 0; i < nclasses; ++i) {
            z = (q - tmp[i]) * BUFFER_LOAD(t, index + i);
            #ifdef BF16
                BUFFER_ATOMIC_STORE(y, index + i, z);
            #else
                BUFFER_STORE(y, index + i, z);
            #endif
        }
    }
}
