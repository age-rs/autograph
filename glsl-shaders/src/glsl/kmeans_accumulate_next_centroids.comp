#version 450

#include "buffer_macros.comp"

layout(local_size_x=8, local_size_y=8) in;

restrict buffer Y {
    T_BUFFER y[];
};

restrict buffer Counts {
    uint u[];
};

readonly buffer X {
    T_BUFFER x[];
};

readonly buffer Classes {
    uint c[];
};

layout(push_constant) uniform PushConsts {
    uint batch_size;
    uint nclasses;
    uint ndim;
};

void main() {
    uint global_x = gl_GlobalInvocationID.x;
    uint global_y = gl_GlobalInvocationID.y;
    uint class_index;
    float tmp;
    if (global_x < nclasses && global_y < ndim) {
        for (uint i = 0; i < batch_size; ++i) {
            class_index = c[i];
            if (class_index == global_x) {
                if (global_y == 0) {
                    u[class_index] += 1;
                }
                tmp = BUFFER_LOAD(y, class_index * ndim + global_y) + BUFFER_LOAD(x, i * ndim + global_y);
                #ifdef BF16
                    BUFFER_ATOMIC_STORE(y, class_index * ndim + global_y, tmp);
                #else
                    BUFFER_STORE(y, class_index * ndim + global_y, tmp);
                #endif
            }
        }
    }
}
