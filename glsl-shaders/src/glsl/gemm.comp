#version 450

#include "buffer_macros.comp"

#define TILE 16

#define M_TILE TILE
#define K_TILE TILE
#define N_TILE TILE

layout(local_size_x = M_TILE, local_size_y = N_TILE) in;

readonly buffer A {
    T_BUFFER a[];
};

readonly buffer B {
    T_BUFFER b[];
};

#ifdef BIAS
readonly buffer Bias {
    T_BUFFER bias[];
};
#endif

restrict buffer C {
    T_BUFFER c[];
};

layout(push_constant) uniform PushConsts {
    T alpha;
    T beta;
    T a0; // ie relu negative slope
    uint m;
    uint k;
    uint n;
    int rsa;
    int csa;
    int rsb;
    int csb;
    int rsc;
    int csc;
};

shared T a_tile[K_TILE][M_TILE];
shared T b_tile[K_TILE][N_TILE];

void main() {
    uint global_x = gl_GlobalInvocationID.x;
    uint global_y = gl_GlobalInvocationID.y;
    uint local_x = gl_LocalInvocationID.x;
    uint local_y = gl_LocalInvocationID.y;

    bool valid = global_x < m && global_y < n;

    T acc = 0;

    uint tile_k;
    for(uint z = 0; z < k; ++z) {
        tile_k = z % K_TILE;
        if (tile_k == 0) {
            barrier();

            if (global_x < m) {
                a_tile[local_y][local_x] = BUFFER_LOAD(a, global_x * rsa + (z + local_y) * csa);
            }

            if (global_y < n) {
                b_tile[local_x][local_y] = BUFFER_LOAD(b, (z + local_x) * rsb + global_y * csb);
            }

            barrier();
        }
        acc += a_tile[tile_k][local_x] * b_tile[tile_k][local_y];
    }

    if (valid) {
        uint i = global_x * rsc + global_y * csc;
        T y = alpha * acc;

        if (beta != 0) {
            y += beta * BUFFER_LOAD(c, i);
        }

        #ifdef BIAS
            y += BUFFER_LOAD(bias, global_y);
        #endif

        #ifdef RELU
        if (y < 0) {
            y *= a0;
        }
        #endif

        #ifdef BF16
            BUFFER_ATOMIC_STORE(c, i, y);
        #else
            BUFFER_STORE(c, i, y);
        #endif
    }
}
