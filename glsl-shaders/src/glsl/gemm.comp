#version 450

// T, LOAD(x), STORE(x), BF16_AS_F32, BIAS, RELU

#ifdef BF16_AS_F32
    #define Ts float
#else 
    #define Ts T
#endif    

#define M_TILE 32

#ifdef T_64
    #define K_TILE 64
#else
    #define K_TILE 32
#endif

#define N_TILE 32

layout(local_size_x = M_TILE, local_size_y = N_TILE) in;

readonly buffer A {
    T[] a;
};

readonly buffer B {
    T[] b;
};

#ifdef BIAS 
readonly buffer Bias {
    T[] bias;
};
#endif

restrict buffer C {
    T[] c;
};

layout(push_constant) uniform PushConsts {
    Ts alpha;
    Ts beta;
    Ts a0; // ie relu negative slope
    uint m;
    uint k;
    uint n;
    int rsa;
    int csa;
    int rsb;
    int csb;
    int rsc;
    int csc; 
};

shared Ts a_tile[K_TILE][M_TILE];
shared Ts b_tile[K_TILE][N_TILE];

void main() {
    
    uint global_x = gl_GlobalInvocationID.x;
    uint global_y = gl_GlobalInvocationID.y;
    uint local_x = gl_LocalInvocationID.x;
    uint local_y = gl_LocalInvocationID.y;
    
    bool valid = global_x < m && global_y < n;
    
    Ts acc = 0;
    
    uint tile_k;
    for(uint z = 0; z < k; ++z) {
        tile_k = (z + K_TILE) % K_TILE;  
        if (tile_k == 0) {
            memoryBarrierShared();
            
            if (global_x < m) {
                a_tile[local_y][local_x] = LOAD(a[global_x * rsa + (z + local_y) * csa]);
            }    
            
            if (global_y < n) {    
                b_tile[local_x][local_y] = LOAD(b[(z + local_x) * rsb + global_y * csb]);
            }
            
            barrier();    
        }
        
        memoryBarrierShared();
        
        if (valid) {
            acc += a_tile[tile_k][local_x] * b_tile[tile_k][local_y];
        }
        
        barrier();
    } 
    
    if (valid) {
        uint i = global_x * rsc + global_y * csc;
        Ts y = alpha * acc;
        
        if (beta != 0) {
            y += beta * LOAD(c[i]);
        }
        
        #ifdef BIAS 
        y += LOAD(bias[global_y]);
        #endif 
        
        #ifdef RELU 
        if (y < 0) {
            y *= a0;
        }
        #endif
        
        c[i] = STORE(y);      
    }
}
