#version 450

#include "buffer_macros.comp"

layout(local_size_x=8, local_size_y=8) in;

// BATCH_SIZE * NDIMS
readonly buffer X {
    T_BUFFER x[];
};

// NCLASSES * NDIMS
readonly buffer C {
    T_BUFFER c[];
};

// NCLASSES * BATCH_SIZE
restrict buffer Y {
    T_BUFFER y[];
};

layout(push_constant) uniform PushConsts {
    uint batch_size;
    uint nclasses;
    uint ndims;
};

void main() {
    uint global_x = gl_GlobalInvocationID.x;
    uint global_y = gl_GlobalInvocationID.y;
    T acc = 0;
    T val = 0;
    if (global_x < batch_size && global_y < nclasses) {
        for (uint z = 0; z < ndims; ++z) {
            val = BUFFER_LOAD(x, global_x * ndims + z) - BUFFER_LOAD(c, global_y * ndims + z);
            acc += val * val;
        }
        #ifdef BF16
            BUFFER_ATOMIC_STORE(y, global_x * nclasses + global_y, acc);
        #else
            BUFFER_STORE(y, global_x * nclasses + global_y, acc);
        #endif
    }
}
